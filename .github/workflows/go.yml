name: Go

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # - uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/.cache/go-build
      #       ~/go/pkg/mod
      #     key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      #     restore-keys: |
      #       ${{ runner.os }}-go-

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
          cache: true

      # - name: Test
      #   run: go test -v ./...

      - name: Build
        run: go build -v ./...

      - name: Go Dependency Submission
        uses: actions/go-dependency-submission@v1.0.2

      # - name: Bump version and push tag
      #   id: tag_version
      #   uses: miguelfito/github-bump-and-tag-action@v1
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     dry_run: true

      # - name: Create a GitHub release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ steps.tag_version.outputs.new_tag }}
      #     release_name: Release ${{ steps.tag_version.outputs.new_tag }}
      #     body: ${{ steps.tag_version.outputs.changelog }}

      - name: Deploy Function to Yandex Cloud
        id: sls-func
        uses: yc-actions/yc-sls-function@v2
        with:
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          folder-id: "b1gdc4jel0cegsk6h65s"
          function-name: "img-verify"
          runtime: "golang116"
          memory: "256Mb"
          entrypoint: "index.Handler"
          execution-timeout: 5
          service-account: "ajeih1bmna4po796e9n9"
          environment: |
            YANDEX_CLOUD_SERVERLESS_FUNCTION=true
          include: |
            ./handlers
            ./logger
            go.mod
            go.sum
            main.go
            index.go
          exclude: |
            ./git
            ./github
            .gitignore
            Dockerfile
            README.md

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # - name: Build and Publish to Github Packages Registry
      #   uses: elgohr/Publish-Docker-Github-Action@master
      #   with:
      #     name: evgensoft/img_verify/img_verify
      #     registry: ghcr.io
      #     username: ${{ secrets.USERNAME }}
      #     password: ${{ secrets. GITHUB_TOKEN }}
      #     dockerfile: Dockerfile
      #     tags: latest

      # - name: Deploy package to VPS
      #   uses: appleboy/ssh-action@master
      #   env:
      #     GITHUB_USERNAME: ${{ secrets.USERNAME }}
      #     GITHUB_TOKEN: ${{ secrets. GITHUB_TOKEN }}
      #   with:
      #     host: ${{ secrets.DEPLOY_HOST }}
      #     port: ${{ secrets.DEPLOY_PORT }}
      #     username: ${{ secrets.DEPLOY_USER }}
      #     key: ${{ secrets.DEPLOY_KEY }}
      #     envs: GITHUB_USERNAME, GITHUB_TOKEN
      #     script: |
      #       docker login ghcr.io -u $GITHUB_USERNAME -p $GITHUB_TOKEN
      #       docker pull ghcr.io/evgensoft/img_verify/img_verify:latest
      #       docker stop img_verify
      #       docker system prune -f
      #       docker run --restart=always --name img_verify -v /home/ubuntu/img_verify:/app/log -dit -p 8080:8080 ghcr.io/evgensoft/img_verify/img_verify:latest
